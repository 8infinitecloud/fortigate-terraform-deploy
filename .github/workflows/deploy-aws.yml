name: Deploy FortiGate to AWS

on:
  workflow_dispatch:
    inputs:
      fortigate_version:
        description: 'FortiGate Version'
        required: true
        default: '7.6'
        type: choice
        options:
        - '6.2'
        - '6.4'
        - '7.0'
        - '7.2'
        - '7.4'
        - '7.6'
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'single'
        type: choice
        options:
        - single
        - ha
        - ha-single-az
        - ha-existing-vpc
        - ha-endpoint
        - ha-3ports
        - loadbalancer
        - gwlb
        - gwlb-crossaz
        - gwlb-multitenant
        - gwlb-transit
        - transitgwy
        - transitgwyconnect
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      license_type:
        description: 'License Type'
        required: true
        default: 'payg'
        type: choice
        options:
        - payg
        - byol
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 'c5.xlarge'
      architecture:
        description: 'Instance Architecture'
        required: true
        default: 'x86'
        type: choice
        options:
        - x86
        - arm
      keypair_name:
        description: 'AWS SSH Key Pair Name'
        required: true
        type: string
      byol_license_1:
        description: 'BYOL License 1 (only for BYOL)'
        required: false
        type: string
      byol_license_2:
        description: 'BYOL License 2 (only for HA BYOL)'
        required: false
        type: string
      s3_bucket:
        description: 'S3 Bucket for Terraform state (optional)'
        required: false
        type: string

env:
  TF_VERSION: '1.5.0'
  WORKING_DIR: ./aws/${{ github.event.inputs.fortigate_version }}/${{ github.event.inputs.deployment_type }}

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      path_exists: ${{ steps.check.outputs.exists }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check deployment path
      id: check
      run: |
        if [ "${{ github.event.inputs.deployment_type }}" = "transitgwy" ]; then
          WORKING_DIR="./aws/${{ github.event.inputs.fortigate_version }}/transitgwy/terraform"
        else
          WORKING_DIR="${{ env.WORKING_DIR }}"
        fi
        
        if [ -d "$WORKING_DIR" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Path $WORKING_DIR does not exist"
          exit 1
        fi

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    if: needs.validate.outputs.path_exists == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.aws_region }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Set working directory
      id: workdir
      run: |
        if [ "${{ github.event.inputs.deployment_type }}" = "transitgwy" ]; then
          echo "dir=./aws/${{ github.event.inputs.fortigate_version }}/transitgwy/terraform" >> $GITHUB_OUTPUT
        else
          echo "dir=${{ env.WORKING_DIR }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Configure S3 backend
      if: github.event.inputs.s3_bucket != ''
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: |
        STATE_KEY="${{ github.event.inputs.fortigate_version }}/${{ github.event.inputs.deployment_type }}/terraform.tfstate"
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "${{ github.event.inputs.s3_bucket }}"
            key    = "$STATE_KEY"
            region = "${{ github.event.inputs.aws_region }}"
          }
        }
        EOF
        
    - name: Create license files
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: |
        if [ "${{ github.event.inputs.license_type }}" = "payg" ]; then
          echo "# PAYG - No license required" > license.lic
          echo "# PAYG - No license required" > license2.lic
        else
          if [ -n "${{ github.event.inputs.byol_license_1 }}" ]; then
            echo "${{ github.event.inputs.byol_license_1 }}" > license.lic
          else
            echo "# BYOL License 1 - Please provide license content" > license.lic
          fi
          
          if [ -n "${{ github.event.inputs.byol_license_2 }}" ]; then
            echo "${{ github.event.inputs.byol_license_2 }}" > license2.lic
          else
            echo "# BYOL License 2 - Please provide license content" > license2.lic
          fi
        fi
        
    - name: Set AZ variables based on region
      id: az
      run: |
        case "${{ github.event.inputs.aws_region }}" in
          us-east-1)
            echo "az1=us-east-1a" >> $GITHUB_OUTPUT
            echo "az2=us-east-1b" >> $GITHUB_OUTPUT
            ;;
          us-west-2)
            echo "az1=us-west-2a" >> $GITHUB_OUTPUT
            echo "az2=us-west-2b" >> $GITHUB_OUTPUT
            ;;
          eu-west-1)
            echo "az1=eu-west-1a" >> $GITHUB_OUTPUT
            echo "az2=eu-west-1b" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "az1=${{ github.event.inputs.aws_region }}a" >> $GITHUB_OUTPUT
            echo "az2=${{ github.event.inputs.aws_region }}b" >> $GITHUB_OUTPUT
            ;;
        esac
        
    - name: Create terraform.tfvars
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: |
        UNIQUE_SUFFIX=$(date +%s)
        
        if [ "${{ github.event.inputs.deployment_type }}" = "transitgwy" ]; then
          cat > terraform.tfvars << EOF
        access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        region = "${{ github.event.inputs.aws_region }}"
        availability_zone1 = "${{ steps.az.outputs.az1 }}"
        availability_zone2 = "${{ steps.az.outputs.az2 }}"
        license_type = "${{ github.event.inputs.license_type }}"
        instance_type = "${{ github.event.inputs.instance_type }}"
        arch = "${{ github.event.inputs.architecture }}"
        tag_name_prefix = "fgt-$UNIQUE_SUFFIX"
        EOF
        else
          cat > terraform.tfvars << EOF
        access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        region = "${{ github.event.inputs.aws_region }}"
        az1 = "${{ steps.az.outputs.az1 }}"
        az2 = "${{ steps.az.outputs.az2 }}"
        license_type = "${{ github.event.inputs.license_type }}"
        size = "${{ github.event.inputs.instance_type }}"
        arch = "${{ github.event.inputs.architecture }}"
        keyname = "${{ github.event.inputs.keypair_name }}"
        vpccidr = "10.1.0.0/16"
        adminsport = "8443"
        tag_name_prefix = "fgt-$UNIQUE_SUFFIX"
        EOF
        fi
        
    - name: Terraform Init
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: terraform init
      
    - name: Terraform Plan
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: terraform plan -input=false -out=tfplan
      
    - name: Terraform Apply
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: |
        echo "Starting Terraform Apply..."
        terraform apply -input=false tfplan
        
    - name: Get Terraform Outputs
      id: outputs
      working-directory: ${{ steps.workdir.outputs.dir }}
      run: |
        echo "Retrieving Terraform outputs..."
        terraform output -json > outputs.json || echo "{}" > outputs.json
        
    - name: Output Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **FortiGate Version:** ${{ github.event.inputs.fortigate_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region:** ${{ github.event.inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Availability Zones:** ${{ steps.az.outputs.az1 }}, ${{ steps.az.outputs.az2 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **License Type:** ${{ github.event.inputs.license_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance Type:** ${{ github.event.inputs.instance_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ${{ github.event.inputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.deployment_type }}" != "transitgwy" ]; then
          echo "- **Key Pair:** ${{ github.event.inputs.keypair_name }}" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ github.event.inputs.s3_bucket }}" ]; then
          echo "- **Terraform State:** Stored in S3 bucket ${{ github.event.inputs.s3_bucket }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Terraform State:** Local (not persistent)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Status: âœ… SUCCESS" >> $GITHUB_STEP_SUMMARY
